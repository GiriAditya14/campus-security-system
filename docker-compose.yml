version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: campus_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: campus_security
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - campus_network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: campus_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - campus_network

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.14
    container_name: campus_neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/neo4j123
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - campus_network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: campus_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/campus_security?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: neo4j123
      ML_SERVICE_URL: http://ml-service:8001
      JWT_SECRET: your-super-secret-jwt-key-for-development
      ENCRYPTION_KEY: your-32-character-encryption-key-dev
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
      - neo4j
    networks:
      - campus_network
    command: npm run dev

  # ML Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: campus_ml_service
    restart: unless-stopped
    environment:
      API_HOST: 0.0.0.0
      API_PORT: 8001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/campus_security?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: neo4j123
      API_KEY: ml-service-dev-key-123
    ports:
      - "8001:8001"
    volumes:
      - ./ml-service:/app
      - ./ml-service/models:/app/models
      - ./ml-service/logs:/app/logs
    depends_on:
      - mongodb
      - redis
      - neo4j
    networks:
      - campus_network
    command: uvicorn app.api:app --host 0.0.0.0 --port 8001 --reload

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: campus_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_WS_URL: ws://localhost:3001
      REACT_APP_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - campus_network
    command: npm start

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local

networks:
  campus_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16